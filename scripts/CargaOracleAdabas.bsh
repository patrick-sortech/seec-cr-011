import br.com.sortech.utils.configurations.database.ConnectionManager;

import java.sql.*;
import java.sql.Connection;
import java.util.*;
import java.text.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;


public static int BATCH_SIZE = 50;
public static int ROWS_LIMIT = 100;
public static int ROWS_OFFSET = 3200;

public static class Debito{
	private String idenDebito;
	private int nuReceita;
	private int anoRefDebito;
	private String chaveExtDebito;
	private String chaveBillId;
	private String nuCotaDebito;
	private String tipoDebito;
	private String chaveLote;

	public String getIdenDebito() {
		return idenDebito;
	}

	public void setIdenDebito(String idenDebito) {
		this.idenDebito = idenDebito;
	}
	public int getNuReceita() {
		return nuReceita;
	}

	public void setNuReceita(int nuReceita) {
		this.nuReceita = nuReceita;
	}

	public int getAnoRefDebito() {
		return anoRefDebito;
	}

	public void setAnoRefDebito(int anoRefDebito) {
		this.anoRefDebito = anoRefDebito;
	}

	public String getChaveExtDebito() {
		return chaveExtDebito;
	}

	public void setChaveExtDebito(String chaveExtDebito) {
		this.chaveExtDebito = chaveExtDebito;
	}

	public String getChaveBillId() {
		return chaveBillId;
	}

	public void setChaveBillId(String chaveBillId) {
		this.chaveBillId = chaveBillId;
	}

	public String getNuCotaDebito() {
		return nuCotaDebito;
	}

	public void setNuCotaDebito(String nuCotaDebito) {
		this.nuCotaDebito = nuCotaDebito;
	}

	public String getTipoDebito() {
		return tipoDebito;
	}

	public void setTipoDebito(String tipoDebito) {
		this.tipoDebito = tipoDebito;
	}

	public String getChaveLote() {
		return chaveLote;
	}

	public void setChaveLote(String chaveLote) {
		this.chaveLote = chaveLote;
	}
}

static public Connection getConexaoOracle() throws Exception {
	Connection conn = null;

	 try {
      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    } catch (Exception e) {
      e.printStackTrace();
    }

    try {
    	String url = "jdbc:oracle:thin:@sefsrvdsv701.fazenda.net:1521/orahml10";
		String userid = "CB8COREADM";
		String passwd = "CB8COREADM";
		conn = DriverManager.getConnection(url, userid, passwd);

		return conn;
	} catch (Exception ex) {
		ex.printStackTrace();
		throw ex;
	} finally {
		//conn = null;
		return conn;
	}
}

static public Connection getConexaoAdabas() throws Exception {
	String url = "jdbc:connx:DD=PATRICK;Gateway=aplsrvhml003;PORT=7500";
	String user = "_UsuAdmGwhomolog";
	String password = "#GW_homolog$1";

	Class.forName("com.Connx.jdbc.TCJdbc.TCJdbcDriver").newInstance();

	return DriverManager.getConnection(url, user, password);
}

static public String geraChaveLote() {
	Date date = Calendar.getInstance().getTime();
	DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssS");
	return dateFormat.format(date);
}

static public boolean insereNovoEvento(Connection conn, int idEvento, String chaveLote) throws java.sql.SQLException{
	String sqlInsertEvento = "INSERT INTO RCT_EVT_E_EVENT_REQUEST \n" +
			"(ID_EVENT, CO_EVENT, TX_REQUEST_DATA, \n" +
			" DT_REQUEST, ST_REQUEST, TT_RETRIES, AD_CREATED_BY, AD_CREATED_DT) \n" +
			"VALUES \n" +
			"(?, '2', ?, sysdate, '1', '5', 'atualizacao', sysdate) \n" +
			"";
	if(idEvento == 0 || chaveLote == null){
		return false;
	}
	try {
		PreparedStatement pstm = conn.prepareStatement(sqlInsertEvento);
		pstm.setInt(1, idEvento);
		pstm.setString(2, chaveLote);
		pstm.executeUpdate();
		conn.commit();

		return true;
	}catch(Exception e){
		e.printStackTrace();
		conn.rollback();

	}
	return false;
}

static public int getEventoNextSequence(Connection conn) throws java.sql.SQLException{
	String sqlGetUltimoEventoId = "SELECT SEQ_CURRENT_VALUE FROM AF_T_NUMERIC_SEQUENCE \n" +
			"WHERE SEQ_NAME = 'SEQ_RCT_EVT_E_EVENT_REQUEST'";

	String sqlUpdateUltimoEventoId = "UPDATE AF_T_NUMERIC_SEQUENCE \n" +
			"SET SEQ_CURRENT_VALUE = ? \n" +
			"WHERE SEQ_NAME = 'SEQ_RCT_EVT_E_EVENT_REQUEST'";
	try {
		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery(sqlGetUltimoEventoId);
		rs.next();
		int ultimoId = rs.getInt("SEQ_CURRENT_VALUE");
		PreparedStatement pstm = conn.prepareStatement(sqlUpdateUltimoEventoId);
		ultimoId++;
		pstm.setInt(1,ultimoId);
		pstm.executeUpdate();
		conn.commit();

		return ultimoId;
	}catch(Exception e){
		e.printStackTrace();
		conn.rollback();

		return 0;
	}

}

static public void gravaDebitosAdabas(
            Connection connection,
            List<Debito> listaDebitos
    ) throws SQLException {
        System.out.println("* ------ CARREGAR DEBITOS NO ADABAS ------*");


        String sqlInsert = "INSERT INTO SITAF_DEBITOS_CORRECAO ( IT_NU_TERMINAL, IT_CO_USUARIO," +
                "IT_IDEN_DEBITO,IT_IN_TIPO_DEBITO,IT_NU_RECEITA,IT_NU_ANO_REF_DEBITO,IT_CHAVE_PESQUISA, " +
                "IT_NU_COTA_DEBITO, IT_CHAVE_ORIGEM_DEBITO) VALUES (?,?,?,?,?,?,?,?,?)";
        try {

            long startTime = System.nanoTime();

            PreparedStatement ps = connection.prepareStatement(sqlInsert);

            for(Debito debito : listaDebitos){
                ps.setString(1, "SICOB");
                ps.setString(2, "INTERNET");
                ps.setString(3, debito.getIdenDebito());
                ps.setString(4, debito.getTipoDebito());
                ps.setInt(5,debito.getNuReceita());
                ps.setInt(6,debito.getAnoRefDebito());
                ps.setString(7, debito.getChaveLote());
                ps.setString(8, debito.getNuCotaDebito());
                ps.setString(9, debito.getChaveExtDebito());
                ps.addBatch();

            }

            ps.executeBatch();
            ps.clearBatch();
            connection.commit();

            long endTime = System.nanoTime();
            long totalTime =  TimeUnit.SECONDS.convert((endTime - startTime), TimeUnit.NANOSECONDS);
            System.out.println("Tempo de Execução: " + totalTime + " segundos");
            System.out.println();

        } catch (Exception ex) {
            System.out.println("ERRO DEBITOS CARREGADOS ADABAS");
            connection.rollback();

            ex.printStackTrace();
        }

    }

static public void loadDebitosFromOracleToAdabas(Connection connOracle, Connection connAdabas, String filtroConsulta) throws java.sql.SQLException {
	//System.out.println("* ------ RECUPERANDO DEBITOS NO ORACLE ------*");
	ResultSet rs = null;
	Debito debito;
	List<Debito> listaDebitos = new ArrayList<Debito>();
	int qtdDados = 0;

	String sqlGetDebitos = "SELECT \n" +
			"    NU_DEVEDOR_RESPONSAVEL,\n" +
			"    ID_DEBITO_EXT,\n" +
			"    CO_RECEITA_PRINCIPAL,\n" +
			"    CO_TRIBUTO_EXT,\n" +
			"    NU_COTA,\n" +
			"    NU_GUIA_LANCAMENTO,\n" +
			"    DT_ANO_LANCAMENTO,\n" +
			"    NU_PARCELA_LANCAMENTO,\n" +
			"    ST_PAGAMENTO,\n" +
			"    ST_LANCAMENTO,\n" +
			"    EXT_BILL_ID,\n" +
			"    BILL_ID\n" +
			"FROM ICS_IT_X_BILL\n" +
			"WHERE ST_PAGAMENTO = '00'\n" +
			"and (DT_ULT_ATU_DIVIDA is null or \n" +
			"(DT_ULT_ATU_DIVIDA is not null and trunc(DT_ULT_ATU_DIVIDA) < trunc(sysdate,'MM'))) \n" +
			"AND SUBSTR(NU_DEVEDOR_RESPONSAVEL,-1,1) = " + filtroConsulta +
			"";

	try {
		long startTime = System.nanoTime();

		PreparedStatement ps = connOracle.prepareStatement(sqlGetDebitos);
		ps.setMaxRows(ROWS_LIMIT);
		rs = ps.executeQuery();

		long endTime = System.nanoTime();
		long totalTime =  TimeUnit.SECONDS.convert((endTime - startTime), TimeUnit.NANOSECONDS);
		//System.out.println("Tempo de Execução: " + totalTime + " segundos");
		//System.out.println();


	} catch (java.sql.SQLException ex) {
		ex.printStackTrace();
	}
	String chaveLoteDebitos = geraChaveLote();
	//System.out.println("GEROU PRIMEIRO LOTE ==> " + chaveLoteDebitos);
	int nextSequence = getEventoNextSequence(connOracle);
	insereNovoEvento(connOracle,nextSequence,chaveLoteDebitos);

	while(rs.next()){
		debito = new Debito();
		debito.setIdenDebito(rs.getString("ID_DEBITO_EXT"));
		switch(rs.getInt("CO_TRIBUTO_EXT")){
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
			case 7:
				debito.setTipoDebito("L");
				break;
			case 9:
				debito.setIdenDebito(rs.getString("NU_DEVEDOR_RESPONSAVEL"));
				debito.setTipoDebito("L");
				break;
			case 5:
			case 6:
				debito.setTipoDebito("D");
				break;
			case 8:
				debito.setTipoDebito("P");
				break;
		}

		debito.setNuReceita(rs.getInt("CO_RECEITA_PRINCIPAL"));
		debito.setAnoRefDebito(rs.getInt("DT_ANO_LANCAMENTO"));
		debito.setChaveExtDebito(rs.getString("EXT_BILL_ID"));
		debito.setNuCotaDebito(rs.getString("NU_PARCELA_LANCAMENTO"));
		debito.setChaveLote(chaveLoteDebitos);

		listaDebitos.add(debito);

		qtdDados++;

		if(qtdDados == BATCH_SIZE){
			gravaDebitosAdabas(connAdabas, listaDebitos);
			chaveLoteDebitos = geraChaveLote();
			//System.out.println("GEROU NOVO LOTE ==> " + chaveLoteDebitos);
			nextSequence = getEventoNextSequence(connOracle);
			insereNovoEvento(connOracle,nextSequence,chaveLoteDebitos);
			listaDebitos = new ArrayList<Debito>();
			qtdDados = 0;
		}
	}

	if(listaDebitos != null || !listaDebitos.isEmpty()){
		////System.out.println("GRAVOU ULTIMO LOTE COM A CHAVE ==> " + chaveLoteDebitos);
		gravaDebitosAdabas(connAdabas, listaDebitos);
	}

}

// INICIO DO CODIGO
Connection connOracle;
Connection connAdabas;

connOracle = getConexaoOracle();
connOracle.setAutoCommit(false);

connAdabas = getConexaoAdabas();
connAdabas.setAutoCommit(false);

String filtro = _in.getString("FILTRO");

try{
	loadDebitosFromOracleToAdabas(connOracle, connAdabas, filtro);

}catch(java.sql.SQLException e){
	connOracle.rollback();
	connOracle.close();
	connOracle = null;
	connAdabas.rollback();
	connAdabas.close();
	connAdabas = null;
}catch(Exception e){
	e.printStackTrace();
	Thread.currentThread().interrupt();
}finally{
	if (connOracle != null) {
		connOracle.commit();
		connOracle.close();
		connOracle = null;
	}
	if (connAdabas != null) {
		connAdabas.commit();
		connAdabas.close();
		connAdabas = null;
	}
}




